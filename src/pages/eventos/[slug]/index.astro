---
import Layout from "../../../layouts/Layout.astro";
import { events, slugify } from "../../../utils/events";
import Arrow from "../../../components/icons/Arrow.astro";
import SectionContainer from "../../../components/SectionContainer.astro";
import Download from "../../../components/icons/Download.astro";
import DownloadFile from "../../../components/icons/DownloadFile.astro";
import Close from "../../../components/icons/Close.astro";
export const prerender = true;

export function getStaticPaths() {
  return events.map((event) => ({
    params: { slug: slugify(event.title) },
  }));
}

const { slug } = Astro.params;

const event = events.find((e) => slugify(e.title) === slug);

if (!event) {
  throw new Error(`Evento no encontrado con slug: ${slug}`);
}
---

<Layout title={event.title}>
  <SectionContainer className="py-20 flex flex-col gap-4 items-start">
    <div
      class="flex flex-col sm:flex-row items-start sm:items-center justify-between w-full"
    >
      <a
        href="/eventos"
        aria-label="Volver a la galería"
        class="flex items-center group relative hover:opacity-70 gap-1 !px-2 !py-1 transition-opacity"
      >
        <Arrow
          class="group-hover:-translate-x-0.5 transition-transform duration-300"
        /> Volver a la Galería
      </a>
      <button
        id="download-all"
        aria-label="Descargar todas las imágenes"
        class="flex items-center group relative hover:opacity-70 gap-1 !m-0 !px-2 !py-1 transition-opacity"
        data-slug={slug}
      >
        <DownloadFile
          class="group-hover:-translate-x-0.5 transition-transform duration-300"
        /> Descargar todas las imágenes
      </button>
    </div>
    <div
      class="w-full flex flex-col items-center justify-center gap-2 p-12 rounded-md"
      style={`background: linear-gradient(#000,#0009), url(${event.image}); background-size:cover; background-position:center`}
    >
      <span class="text-center text-xs sm:text-sm">
        {event.date}
      </span>
      <h1
        class="text-3xl uppercase sm:text-4xl bg-cover bg-center font-bold tracking-wider text-center text-balance"
      >
        {event.title}
      </h1>
      <p class="text-pretty text-center opacity-80">{event.description}</p>
    </div>

    <div class="columns-3 space-y-4 space-x-4">
      {
        event.images?.map((img, index) => (
          <img
            class="size-full object-cover break-inside-avoid rounded shadow-2xl cursor-pointer hover:opacity-70 transition-all"
            src={img}
            alt={`Imagen ${index + 1}`}
            title={`Imagen ${index + 1}`}
            data-index={index}
            onclick="openModal(event)"
          />
        ))
      }
    </div>

    <div
      id="image-modal"
      class="fixed inset-0 z-50 hidden items-center justify-center bg-black/80"
    >
      <div class="absolute top-4 right-6 flex items-start gap-2">
        <a
          id="modal-download"
          class="download"
          aria-label="Descargar imagen"
          download
        >
          <Download />
        </a>
        <button id="modal-close" aria-label="Cerrar imagen">
          <Close />
        </button>
      </div>

      <button
        id="modal-prev"
        class="absolute left-4 text-4xl"
        aria-label="Anterior imagen"
      >
        &#10094;
      </button>

      <img
        id="modal-img"
        class="max-h-[80vh] max-w-[90vw] rounded-md"
        src=""
        alt="Imagen ampliada"
      />

      <button
        id="modal-next"
        class="absolute right-4 text-4xl"
        aria-label="Siguiente imagen"
      >
        &#10095;
      </button>
    </div>
  </SectionContainer>
</Layout>

<style>
  button,
  .download {
    transition: opacity 0.3s;
    cursor: pointer;
    color: #fff;
    padding: 8px;
  }

  button:hover,
  .download:hover {
    opacity: 0.7;
  }
</style>

<script src="https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js"
></script>

<script is:inline>
  document.addEventListener("astro:page-load", () => {
    const images = Array.from(document.querySelectorAll("[data-index]")).map(
      (img) => img.src
    );
    const modal = document.getElementById("image-modal");
    const modalImg = document.getElementById("modal-img");
    const closeBtn = document.getElementById("modal-close");
    const nextBtn = document.getElementById("modal-next");
    const prevBtn = document.getElementById("modal-prev");

    let currentIndex = 0;

    const downloadBtn = document.getElementById("modal-download");

    window.openModal = function (e) {
      currentIndex = parseInt(e.target.getAttribute("data-index"));
      const src = images[currentIndex];
      modalImg.src = src;

      // No usar downloadBtn.href porque Facebook lo bloquea
      // En vez de eso, agregamos un listener que descargue la imagen vía fetch
      downloadBtn.onclick = async function () {
        const response = await fetch(src);
        const blob = await response.blob();

        const extension = blob.type.split("/")[1]; // ej: jpeg
        const fileName = `imagen-${currentIndex + 1}.${extension}`;

        const link = document.createElement("a");
        link.href = URL.createObjectURL(blob);
        link.download = fileName;
        link.click();
        URL.revokeObjectURL(link.href);
      };

      modal.classList.remove("hidden");
      modal.classList.add("flex");
    };

    function closeModal() {
      modal.classList.add("hidden");
      modal.classList.remove("flex");
    }

    function showNext() {
      currentIndex = (currentIndex + 1) % images.length;
      modalImg.src = images[currentIndex];
    }

    function showPrev() {
      currentIndex = (currentIndex - 1 + images.length) % images.length;
      modalImg.src = images[currentIndex];
    }

    closeBtn.addEventListener("click", closeModal);
    nextBtn.addEventListener("click", showNext);
    prevBtn.addEventListener("click", showPrev);

    window.addEventListener("keydown", (e) => {
      if (modal.classList.contains("hidden")) return;
      if (e.key === "ArrowRight") showNext();
      if (e.key === "ArrowLeft") showPrev();
      if (e.key === "Escape") closeModal();
    });

    modal.addEventListener("click", (e) => {
      if (e.target === modal) closeModal();
    });

    const downloadAllBtn = document.getElementById("download-all");
    const slug = downloadAllBtn?.dataset.slug || "evento"; // fallback por si no existe

    downloadAllBtn?.addEventListener("click", async () => {
      const zip = new JSZip();
      const folder = zip.folder("evento-imagenes");

      // Descargar cada imagen y agregarla al zip
      const fetchImages = images.map(async (url, index) => {
        const response = await fetch(url);
        const blob = await response.blob();
        const fileName = `imagen-${index + 1}${getExtensionFromBlob(blob)}`;
        folder.file(fileName, blob);
      });

      await Promise.all(fetchImages);

      // Generar el zip y forzar descarga
      const content = await zip.generateAsync({ type: "blob" });
      const a = document.createElement("a");
      a.href = URL.createObjectURL(content);
      a.download = `imagenes-evento-${slug}.zip`;
      a.click();
    });

    function getExtensionFromBlob(blob) {
      const type = blob.type; // ej: image/jpeg
      const ext = type.split("/")[1]; // jpeg
      return `.${ext}`;
    }
  });
</script>
