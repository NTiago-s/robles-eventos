---
import SectionContainer from "../../components/SectionContainer.astro";
import Layout from "../../layouts/Layout.astro";
import { events } from "../../utils/events";
const slugify = (str: string): string =>
  str
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/[^\w\s-]/g, "")
    .trim()
    .replace(/\s+/g, "-");

const groupedEvents = events.reduce(
  (acc, event) => {
    if (!acc[event.type]) acc[event.type] = [];
    acc[event.type].push(event);
    return acc;
  },
  {} as Record<string, typeof events>
);
---

<Layout
  title="Galería de Eventos"
  description="Explorá nuestra galería de eventos: fotos de cumpleaños de 15, bodas, aniversarios y celebraciones organizadas por Los Robles."
>
  <SectionContainer id="galeria" class="py-24">
    <h2 class="text-3xl sm:text-4xl font-bold text-center mb-16">
      Galeria de Eventos
    </h2>

    <input
      id="searchInput"
      type="text"
      placeholder="Buscar por nombre, tipo o fecha..."
      class="border px-4 py-2 w-full rounded mb-10"
    />

    <div id="eventsGrid" class="space-y-12">
      {
        Object.entries(groupedEvents).map(([type, events]) => (
          <section>
            <h3 class="text-2xl font-bold mb-6 underline">{type}</h3>
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
              {events.map((event) => (
                <div
                  class="event-card"
                  data-title={event.title.toLowerCase()}
                  data-type={event.type.toLowerCase()}
                  data-date={event.date}
                >
                  <a href={`/eventos/${slugify(event.title)}`}>
                    <img
                      src={event.image}
                      alt={event.title}
                      class="rounded-lg"
                    />
                    <h4 class="text-sm font-semibold mt-2">{event.title}</h4>
                  </a>
                </div>
              ))}
            </div>
          </section>
        ))
      }
    </div>
    <script>
      document.addEventListener("astro:page-load", () => {
        function normalizeText(text: string): string {
          return text
            .toLowerCase()
            .normalize("NFD")
            .replace(/[\u0300-\u036f]/g, "")
            .trim();
        }

        function parseDateFormats(dateStr: string): string[] {
          const date = new Date(dateStr);
          const monthNames = [
            "enero",
            "febrero",
            "marzo",
            "abril",
            "mayo",
            "junio",
            "julio",
            "agosto",
            "septiembre",
            "octubre",
            "noviembre",
            "diciembre",
          ];

          if (isNaN(date.getTime())) return [];

          const day = date.getDate().toString().padStart(2, "0");
          const monthNum = (date.getMonth() + 1).toString().padStart(2, "0");
          const year = date.getFullYear();
          const monthName = monthNames[date.getMonth()];

          return [
            `${day}-${monthNum}-${year}`,
            `${day}/${monthNum}/${year}`,
            `${year}-${monthNum}-${day}`,
            `${year}/${monthNum}/${day}`,
            `${day} ${monthName} ${year}`,
            `${day} de ${monthName} de ${year}`,
            monthName,
          ];
        }

        function matchCard(card: HTMLElement, query: string): boolean {
          const title = normalizeText(card.dataset.title || "");
          const type = normalizeText(card.dataset.type || "");
          const dateRaw = card.dataset.date || "";
          const formats = parseDateFormats(dateRaw);
          const queryNorm = normalizeText(query);

          return (
            title.includes(queryNorm) ||
            type.includes(queryNorm) ||
            formats.some((f) => f.includes(queryNorm))
          );
        }

        function attachSearchInput() {
          const input = document.getElementById(
            "searchInput"
          ) as HTMLInputElement | null;
          const cards = document.querySelectorAll(".event-card");

          if (!input) return;

          input.addEventListener("input", (e) => {
            const query = (e.target as HTMLInputElement).value;

            cards.forEach((card) => {
              const isVisible = matchCard(card as HTMLElement, query);
              (card as HTMLElement).style.display = isVisible
                ? "block"
                : "none";
            });

            const sections = document.querySelectorAll("#eventsGrid > section");
            sections.forEach((section) => {
              const visibleCards = section.querySelectorAll(
                ".event-card:not([style*='display: none'])"
              );
              (section as HTMLElement).style.display = visibleCards.length
                ? "block"
                : "none";
            });
          });
        }

        attachSearchInput();

        window.addEventListener("pageshow", () => {
          attachSearchInput();
        });
      });
    </script>
  </SectionContainer>
</Layout>
